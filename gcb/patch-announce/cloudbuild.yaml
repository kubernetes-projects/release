timeout: 1200s

#### SECURITY NOTICE ####
# Google Cloud Build (GCB) supports the usage of secrets for build requests.
# Secrets appear within GCB configs as base64-encoded strings.
# These secrets are GCP Cloud KMS-encrypted and cannot be decrypted by any human or system
# outside of GCP Cloud KMS for the GCP project this encrypted resource was created for.
# Seeing the base64-encoded encrypted blob here is not a security event for the project.
#
# More details on using encrypted resources on Google Cloud Build can be found here:
# https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-secrets-credentials
#
# (Please do not remove this security notice.)
secrets:
- kmsKeyName: projects/k8s-staging-release-test/locations/global/keyRings/release/cryptoKeys/encrypt-0
  secretEnv:
    GITHUB_TOKEN: CiQAzX5NM13ZVJOM+E0k629PSa7H5Hkm4mJlPbm7hR8nr67KGAoSUQCmb2uz62tmpa7is9YJx8tlEspVytgq5HAvsd9DWey/oRCsv4VkVBRhnNnlpnmQ8eDPXAaS0GfjrP4KuCgT3mM570N1FH6hTN+u7Yg8uaOxWw==
# TODO: move to the k8s-staging-release-test
- kmsKeyName: projects/cf-london-servces-k8s/locations/global/keyRings/hhorl-k8s-release/cryptoKeys/sendgrid
  secretEnv:
    SENDGRID_API_KEY: CiQAkn5y0WUR0kZIqj1v4UW2McFdlceel2zptSa468+Ir/gDeh0SbwDMTYRJdFtqt2x2hGPN7oOoMs2lCLFoY+oh4Mb1b/nQehooMYQuNwupxOpnwE+d/GbEFhwtMg9wbA5zhOMYPe0OLsSAXvt4w/IC1Z701Ev3CMdT6ZjicillZoBlFYhVlFPQLWcm8jtobdQcDj91eg==

steps:
- id: clone-k8s
  waitFor: [ '-' ]
  name: gcr.io/cloud-builders/git
  dir: "go/src/k8s.io"
  args:
  - "clone"
  - "${_K8S_GIT_URL}"
  - "--branch=${_K8S_GIT_BRANCH}"
- id: clone-release
  waitFor: [ '-' ]
  name: gcr.io/cloud-builders/git
  dir: "go/src/k8s.io"
  args:
  - "clone"
  - "${_RELEASE_GIT_URL}"
  - "--branch=${_RELEASE_GIT_BRANCH}"

- id: prepare-and-send
  name: "gcr.io/k8s-staging-release-test/k8s-cloud-builder:v1.13.8-1"
  env:
  - "SENDER_NAME=${_SENDER_NAME}"
  - "SENDER_EMAIL=${_SENDER_EMAIL}"
  - "FREEZE_DATE=${_FREEZE_DATE}"
  - "CUT_DATE=${_CUT_DATE}"
  - "NOMOCK=${_NOMOCK}"
  - "LOG_LEVEL=${_LOG_LEVEL}"
  secretEnv:
  - GITHUB_TOKEN
  - SENDGRID_API_KEY
  dir: "go/src/k8s.io/release"
  entrypoint: bash
  args:
  - -c
  - |
    set -e
    set -u
    set -o pipefail

    export GOPATH="/workspace/go"
    export GOBIN="$${GOPATH}/bin"
    export PATH="$${PATH}:$${GOBIN}"

    # TODO: Until we've switched away from the shell release note tool, we
    # still need this binary in the PATH
    go install ./cmd/blocking-testgrid-tests

    # Notes:
    #   - GITHUB_TOKEN & SENDGRID_API_KEY need to be picked up by the
    #     application from the env, we don't want to log or pass those
    #     sensitive values as flags.
    #   - Once we've removed all external dependencies and the tool does not
    #     shell out any more, we can also compile, bake and release this tool
    #     as a container image and use that instead of `go run`ing it.
    go run ./cmd/krel \
      patch-announce \
        --repo=../kubernetes \
        --release-repo=. \
        --sender-name="$${SENDER_NAME}" \
        --sender-email="$${SENDER_EMAIL}" \
        --cut-date="$${CUT_DATE}" \
        --freeze-date="$${FREEZE_DATE}" \
        --log-level="$${LOG_LEVEL}" \
        --nomock="$${NOMOCK}"

substitutions:
  # The branch of k/kubernetes to check out, the branch to announce a patch release for (e.g.: release-1.15)
  _K8S_GIT_BRANCH:     null
  # Date of CP freeze, ISO 8601 (e.g.: 2019-12-06)
  _FREEZE_DATE:        null
  # Date of planned cut, ISO 8601 (e.g.: 2019-12-11)
  _CUT_DATE:           null
  # The mail sender's name. Will also be used as a receipient in mock mode. (e.g.: "Jane Doe")
  _SENDER_NAME:        null
  # The mail sender's email. Will also be used as a receipient in mock mode. (e.g.: jane.doe@example.org")
  _SENDER_EMAIL:       null
  # For the real run, set to 'nomock' (e.g.: 0,1,f,t,false,true)
  _NOMOCK:             '0'
  # git-clone'able URL for k/kubernetes
  _K8S_GIT_URL:        https://github.com/kubernetes/kubernetes
  # git-clone'able URL for k/release
  _RELEASE_GIT_URL:    https://github.com/kubernetes/release
  # The branch of k/release to check out
  _RELEASE_GIT_BRANCH: master
  # The log level to be used with the patch-announce tool
  _LOG_LEVEL:          info
